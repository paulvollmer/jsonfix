{"version":3,"sources":["webpack:///app.build.js","webpack:///webpack/bootstrap 9e46b8ad901cfcbece60","webpack:///./web/app.js","webpack:///./src/jsonfix.js","webpack:///./src/jsonlinterror.js","webpack:///./src/fix.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","update","jsonfix","JSONFix","jsonlint","fixed","process","editorSource","getDoc","getValue","isValid","editorResult","setValue","input","setResultMessage","message","wasFixed","JSON","stringify","result","setResultData","setResultViz","text","type","resultMessage","document","getElementById","innerHTML","className","data","console","log","tmpData","totalTries","errorList","resultViz","length","expecting","got","fix","window","onload","CodeMirror","fromTextArea","lineNumbers","mode","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","writable","key","protoProps","staticProps","JsonLintError","this","maximumTries","value","src","jsonParsed","parse","e","tryFix","normalize","replace","linted","err","push","description","tryFixParseError","fixedEOF","tryFixParseErrorEOF","tmp","tryFixParseErrorUndefined","tryFixParseErrorCurlyBracket","tryFixParseErrorColon","tryFixParseErrorSTRING","tryFixParseErrorNUMBER","Error","lastChar","inputLines","split","line","join","totalchars","firstChar","fixed2","missingComma","indexOf","tmpFixed","missingColon","fixed3","code","msg","errorLines","fixedLine"],"mappings":"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","file":"app.build.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * jsonfix/app.js\n * this is code for the web frontend.\n */\n\nvar JSONFix = __webpack_require__(1);\nvar editorSource = void 0;\nvar editorResult = void 0;\n\nwindow.onload = function () {\n  editorSource = CodeMirror.fromTextArea(document.getElementById('source'), {\n    lineNumbers: true,\n    mode: 'application/json'\n  });\n  editorResult = CodeMirror.fromTextArea(document.getElementById('result'), {\n    lineNumbers: true,\n    mode: 'application/json'\n  });\n};\n\nfunction update() {\n  var jsonfix = new JSONFix(jsonlint);\n  var fixed = jsonfix.process(editorSource.getDoc().getValue());\n\n  if (fixed.isValid) {\n    editorResult.getDoc().setValue(fixed.input);\n    setResultMessage(fixed.message, 'pass');\n  } else {\n    if (fixed.wasFixed === true) {\n      editorResult.getDoc().setValue(JSON.stringify(fixed.result, null, 2));\n      setResultMessage(fixed.message, 'fixed');\n    } else {\n      editorResult.getDoc().setValue('');\n      setResultMessage(fixed.message, 'fail');\n    }\n  }\n\n  // document.getElementById('result-container').style.visibility = ''\n\n  setResultData(fixed);\n  setResultViz(fixed);\n}\n\nfunction setResultMessage(text, type) {\n  var resultMessage = document.getElementById('result-message');\n  resultMessage.innerHTML = text;\n  resultMessage.className = type;\n}\n\nfunction setResultData(data) {\n  console.log(data);\n  var tmpData = {\n    input: data.input,\n    isValid: data.isValid,\n    wasFixed: data.wasFixed,\n    message: data.message,\n    result: data.result,\n    totalTries: data.totalTries,\n    errorList: data.errorList\n  };\n  var resultData = document.getElementById('result-data');\n  resultData.innerHTML = '<pre>' + JSON.stringify(tmpData, null, 2) + '</pre>';\n}\n\nfunction setResultViz(data) {\n  var resultViz = document.getElementById('result-viz');\n  var text = '';\n  text += '<p>Total number of tries: ' + data.totalTries + '</p>';\n  for (var i = 0; i < data.errorList.length; i++) {\n    text += '<div>';\n    text += '<p>';\n    text += '<b>' + (i + 1) + '. Fix</b>';\n    text += ' expecting: <code>' + data.errorList[i].expecting + '</code>';\n    text += ' got: <code>' + data.errorList[i].got + '</code>';\n    text += '</p>';\n    text += '<pre>' + data.errorList[i].fix + '</pre>';\n    text += '</div>';\n  }\n  resultViz.innerHTML = text;\n}\n\nwindow.jsonfix = {\n  update: update\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonLintError = __webpack_require__(2);\nvar fix = __webpack_require__(3);\n\n/**\n *\n */\n\nvar JSONFix = function () {\n  /**\n   * @param {Object} jsonlint - the jsonlint dependency\n   */\n  function JSONFix(jsonlint) {\n    _classCallCheck(this, JSONFix);\n\n    this.input = null; // store the input data as string\n    this.isValid = null; // if input is valid, set to true\n    this.wasFixed = null; // set to true if source was successful fixed\n    this.message = null; // a message about the fix process\n    this.result = null; // store the fixed json data here\n    this.totalTries = 0; // count the number of \"JSONFixer\" calls\n    this.errorList = []; // all found and fixed bugs will be reported here.\n    this.jsonlint = jsonlint; // the jsonlint instance\n    this.maximumTries = 100;\n  }\n\n  /**\n   * functions\n   * @param {String} src - json data\n   * @return {String} fixed json data\n   */\n\n\n  _createClass(JSONFix, [{\n    key: 'process',\n    value: function process(src) {\n      // set the input\n      this.input = src;\n\n      // reset some variables\n      this.isValid = null;\n      this.wasFixed = null;\n      this.message = null;\n      this.result = null;\n      this.totalTries = 0;\n      this.errorList = [];\n\n      // first check if source is valid...\n      try {\n        var jsonParsed = JSON.parse(src);\n        this.isValid = true;\n        this.wasFixed = false;\n        this.message = 'JSON is valid!';\n        this.result = jsonParsed;\n      } catch (e) {\n        this.isValid = false;\n\n        // check if source is empty\n        if (src === '') {\n          this.wasFixed = true;\n          this.message = 'empty source detected...';\n          this.result = {};\n          this.totalTries = 1;\n          // TODO: JSONFix.errorList.push({});\n        } else {\n          this.tryFix(this.normalize(src));\n        }\n      }\n\n      // DEBUG(this.message);\n      return this;\n    }\n\n    /**\n     * optimize input source for bug detection\n     *\n     * @param {String} src - json data\n     * @return {String} normalized json data\n     */\n\n  }, {\n    key: 'normalize',\n    value: function normalize(src) {\n      var optimizedSrc1 = src.replace('{', '{\\n');\n      var optimizedSrc2 = optimizedSrc1.replace('}', '\\n}');\n      var optimizedSrc3 = optimizedSrc2.replace('\",', '\",\\n');\n      // TODO: remove whitespace\n      // TODO: remove java style comments\n      return optimizedSrc3;\n    }\n\n    /**\n     * this function we call multiple times. (at the callbacks of the different fix functions)\n     *\n     * @param {String} src - json data\n     * @return {this} this JSONFix instance\n     */\n\n  }, {\n    key: 'tryFix',\n    value: function tryFix(src) {\n      this.totalTries++;\n\n      // stop infinite loops after a maximum number of tries\n      if (this.totalTries === this.maximumTries) {\n        this.wasFixed = false;\n        return this;\n      }\n\n      // console.log('JSONTryFix totalTries =', this.totalTries, 'source:', src);\n\n      // try to lint the source. we use this to get the jsonlint error and detect the bug.\n      try {\n        var linted = this.jsonlint.parse(src);\n        this.wasFixed = true;\n        this.message = 'input was successfully fixed!';\n        this.result = linted;\n      } catch (e) {\n        // save error to history\n        var err = new JsonLintError().parse(e.message);\n        this.errorList.push(err);\n\n        // try to fix... check if fix method exists.\n        switch (err.description) {\n          case 'Parse error':\n            err.message = null;\n            err.fix = null;\n            this.tryFixParseError(src, err);\n            break;\n          default:\n            this.result = null;\n            this.message = 'cannot fix the error type \"' + err.description + '\"... sorry';\n            break;\n        }\n      }\n    }\n\n    /**\n     * we only fix parse errors...\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     */\n\n  }, {\n    key: 'tryFixParseError',\n    value: function tryFixParseError(input, err) {\n      // check the error.got string and choose a fixer\n      switch (err.got) {\n        case 'EOF\\'':\n          {\n            var fixedEOF = this.tryFixParseErrorEOF(input, err);\n            this.tryFix(fixedEOF);\n            break;\n          }\n        case 'undefined\\'':\n          {\n            var tmp = this.tryFixParseErrorUndefined(input, err);\n            this.tryFix(tmp);\n            break;\n          }\n        case '}\\'':\n          {\n            var _tmp = this.tryFixParseErrorCurlyBracket(input, err);\n            this.tryFix(_tmp);\n            break;\n          }\n        case ':\\'':\n          {\n            var _tmp2 = this.tryFixParseErrorColon(input, err);\n            this.tryFix(_tmp2);\n            break;\n          }\n        case 'STRING\\'':\n          {\n            // case \"TRUE'\":\n            // case \"FALSE'\":\n            var _tmp3 = this.tryFixParseErrorSTRING(input, err);\n            this.tryFix(_tmp3);\n            break;\n          }\n        case 'NUMBER\\'':\n          {\n            var _tmp4 = this.tryFixParseErrorNUMBER(input, err);\n            this.tryFix(_tmp4);\n            break;\n          }\n        default:\n          JSONFix.wasFixed = false;\n          JSONFix.message = 'cannot fix got=\"' + err.got + '\" ' + 'expecting=\"' + err.expecting + '\"';\n          throw new Error(JSONFix.message);\n      }\n    }\n\n    /**\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     * @return {String} fixed json data\n     */\n\n  }, {\n    key: 'tryFixParseErrorEOF',\n    value: function tryFixParseErrorEOF(input, err) {\n      // console.log('call tryFixParseErrorEOF')\n      // console.log('input:', input)\n      // console.log('err:', err)\n      // console.log('cb:', cb);\n\n      // check if last char is } or ]\n      var lastChar = input[input.length - 1];\n      // console.warn('last char', lastChar);\n      if (lastChar !== '}' || lastChar !== ' ]') {\n        // check if input is object or array...\n        if (input[0] === '{') {\n          // console.warn('input is object');\n          input += '}';\n          err.message = 'missing } at end of source';\n          err.fix = input;\n        }\n        if (input[0] === '[') {\n          // console.warn('input is array');\n          input += ']';\n          err.message = 'missing ] at end of source';\n          err.fix = input;\n        }\n      }\n      return input;\n    }\n\n    /**\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     * @return {String} fixed json data\n     */\n\n  }, {\n    key: 'tryFixParseErrorUndefined',\n    value: function tryFixParseErrorUndefined(input, err) {\n      // console.log('call fixParseError_undefined');\n      // console.log('input:', input)\n      // console.log('err:', err)\n      // console.log('cb:', cb);\n\n      var inputLines = input.split('\\n');\n      // console.log('error at this line:', inputLines[err.line-1]);\n      var tmp = inputLines[err.line - 1].split(',');\n      // console.log(tmp);\n      inputLines[err.line - 1] = tmp[0] + '\",';\n\n      var fixed = inputLines.join('\\n');\n      // console.log('fixed: \"'+fixed+'\"');\n\n      // cb(fixed);\n      return fixed;\n    }\n\n    /**\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     * @return {String} fixed json data\n     */\n\n  }, {\n    key: 'tryFixParseErrorCurlyBracket',\n    value: function tryFixParseErrorCurlyBracket(input, err) {\n      // JSONFix.message = 'TODO: fix {';\n\n      // if(err.expecting === \"':'\") {\n      //   console.log('} & :');\n      // } else if(err.expecting === \"'STRING'\") {\n      //     console.log('} & STRING');\n      // } else {\n      //   fixParseError_CurlyBracket(input, err, cb);\n      // };\n\n      var inputLines = input.split('\\n');\n      // console.info('error at this line:', inputLines[err.line-1]);\n\n      if (err.expecting === '\\'STRING\\'') {\n        // console.log('too much \",\" ?');\n        // check if comma is last char\n        var totalchars = inputLines[err.line - 1].length;\n        var lastChar = inputLines[err.line - 1][totalchars - 1];\n        // console.log('totalchars:', totalchars);\n        // console.log('lastChar:', lastChar);\n\n        if (lastChar === ',') {\n          // console.info('remove last char (,)');\n          // fix it...\n          inputLines[err.line - 1] = inputLines[err.line - 1].replace(',', '');\n        }\n\n        var fixed = inputLines.join('\\n');\n        err.fix = fixed;\n        // console.log('fixed: \"'+fixed+'\"');\n\n        // cb(fixed);\n        return fixed;\n      } else if (err.expecting === '\\'EOF\\', \\'}\\', \\':\\', \\',\\', \\']\\'') {\n        return input;\n      } else if (err.expecting === '\\',\\', \\']\\'') {\n        inputLines[err.line - 1] += ']';\n        return inputLines.join('\\n');\n      }\n    }\n\n    /**\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     * @return {String} fixed json data\n     */\n\n  }, {\n    key: 'tryFixParseErrorColon',\n    value: function tryFixParseErrorColon(input, err) {\n      if (err.expecting === '\\'EOF\\', \\'}\\', \\',\\', \\']\\'') {\n        var firstChar = input[0];\n        var lastChar = input[input.length - 1];\n        // console.log('firstChar', firstChar);\n        // console.log('lastChar', lastChar);\n\n        // check if { is missing...\n        if (firstChar !== '{' && lastChar === '}') {\n          err.message = 'missing { at the beginning of the json';\n          var fixed = '{' + input;\n          err.fix = fixed;\n          return fixed;\n        }\n\n        // check if [ is missing...\n        if (firstChar !== '[' && lastChar === ']') {\n          err.message = 'missing [ at the beginning of the json';\n          var fixed2 = '[' + input;\n          err.fix = fixed2;\n          return fixed2;\n        }\n      }\n\n      if (err.expecting === '\\'STRING\\', \\'NUMBER\\', \\'NULL\\', \\'TRUE\\', \\'FALSE\\', \\'{\\', \\'[\\'') {\n        // multiple colon\n      }\n    }\n\n    /**\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     * @return {String} fixed json data\n     */\n\n  }, {\n    key: 'tryFixParseErrorSTRING',\n    value: function tryFixParseErrorSTRING(input, err) {\n      var inputLines = input.split('\\n');\n      // console.log('inputLines:', inputLines);\n      // console.log('buggyCode:', inputLines[err.line-1]);\n\n      if (err.expecting === '\\'EOF\\', \\'}\\', \\',\\', \\']\\'') {\n        err.message = 'missing comma';\n        // console.log(err.messsage);\n        var fixed = fix.missingComma(inputLines[err.line - 1]);\n        err.fix = fixed;\n        inputLines[err.line - 1] = fixed;\n      } else if (err.expecting === '\\'EOF\\', \\'}\\', \\':\\', \\',\\', \\']\\'') {\n        // is colon missing?\n        if (inputLines[err.line - 1].indexOf(':') === -1) {\n          // console.log('cannot find colon');\n\n          err.message = 'missing colon';\n          // console.log(err.message);\n          var tmpFixed = fix.missingColon(inputLines[err.line - 1]);\n          err.fix = tmpFixed;\n          inputLines[err.line - 1] = tmpFixed;\n        }\n\n        // is comma missing?\n        if (inputLines[err.line - 1].indexOf(',') === -1) {\n          // console.log('cannot find ,');\n          var fixed3 = fix.missingComma(inputLines[err.line - 1]);\n          err.fix = fixed3;\n          inputLines[err.line - 1] = fixed3;\n        }\n      } else {\n        JSONFix.message = 'cannot fix this ugly bug... sorry!';\n        JSONFix.wasFixed = false;\n      }\n\n      var fixedResult = inputLines.join('\\n');\n      // console.info('fixedResult: \"'+fixedResult+'\"');\n      return fixedResult;\n    }\n\n    /**\n     * @param {String} input - json data\n     * @param {Object} err - jsonlint error\n     */\n\n  }, {\n    key: 'tryFixParseErrorNUMBER',\n    value: function tryFixParseErrorNUMBER(input, err) {\n      // if (err.expecting === '\\'EOF\\', \\'}\\', \\',\\', \\']\\'') {\n      //\n      // }\n    }\n  }]);\n\n  return JSONFix;\n}();\n\nif (true) {\n  module.exports = JSONFix;\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * JsonLint error parser and data structure\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonLintError = function () {\n  /**\n   * the error data structure we want to return.\n   */\n  function JsonLintError() {\n    _classCallCheck(this, JsonLintError);\n\n    this.description = '';\n    this.line = '';\n    this.code = '';\n    this.expecting = '';\n    this.got = '';\n  }\n\n  /**\n   * parse a jsonlint message and return an error object with\n   * description, line, code, expecting and got elements\n   *\n   * @param {String} msg - the output from jsonlint\n   * @return {Object}\n   */\n\n\n  _createClass(JsonLintError, [{\n    key: 'parse',\n    value: function parse(msg) {\n      var errorLines = msg.split('\\n');\n      this.description = errorLines[0].split(' on line ')[0];\n      this.line = errorLines[0].split('on line ')[1].split(':')[0];\n      this.code = errorLines[1];\n      this.expecting = errorLines[3].split('Expecting ')[1].split(', got ')[0];\n      this.got = errorLines[3].split(', got \\'')[1];\n      // console.log('------------------------');\n      // console.log(this);\n      // console.log('------------------------');\n      return this;\n    }\n  }]);\n\n  return JsonLintError;\n}();\n\nmodule.exports = JsonLintError;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * fix missing colon\n *\n * @param {Srtring} input - part of json data\n * @return {String} fixed json data\n */\n\nexports.missingColon = function (input) {\n  if (!input || input === '') {\n    return '';\n  } else {\n    var tmp = input.split('\"');\n    var fixedLine = '';\n    if (tmp.length === 3) {\n      fixedLine = tmp[0] + '\"' + tmp[1] + '\":';\n    } else if (tmp.length === 5) {\n      fixedLine = tmp[0] + '\"' + tmp[1] + '\":' + tmp[2] + '\"' + tmp[3] + '\"' + tmp[4];\n    } else {\n      throw new Error('cannot set colon');\n    }\n    return fixedLine;\n  }\n};\n\n/**\n * fix missing comma\n *\n * @param {Srtring} input - part of json data\n * @return {String} fixed json data\n */\nexports.missingComma = function (input) {\n  if (!input || input === '') {\n    return '';\n  } else {\n    return input + ',';\n  }\n};\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// app.build.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9e46b8ad901cfcbece60","'use strict';\n\n/**\n * jsonfix/app.js\n * this is code for the web frontend.\n */\n\nconst JSONFix = require('../src/jsonfix');\nlet editorSource;\nlet editorResult;\n\nwindow.onload = function() {\n  editorSource = CodeMirror.fromTextArea(document.getElementById('source'), {\n    lineNumbers: true,\n    mode: 'application/json',\n  });\n  editorResult = CodeMirror.fromTextArea(document.getElementById('result'), {\n    lineNumbers: true,\n    mode: 'application/json',\n  });\n};\n\nfunction update() {\n  let jsonfix = new JSONFix(jsonlint);\n  let fixed = jsonfix.process(editorSource.getDoc().getValue());\n\n  if (fixed.isValid) {\n    editorResult.getDoc().setValue(fixed.input);\n    setResultMessage(fixed.message, 'pass');\n  } else {\n    if(fixed.wasFixed === true) {\n      editorResult.getDoc().setValue(JSON.stringify(fixed.result, null, 2));\n      setResultMessage(fixed.message, 'fixed');\n    } else {\n      editorResult.getDoc().setValue('');\n      setResultMessage(fixed.message, 'fail');\n    }\n  }\n\n  // document.getElementById('result-container').style.visibility = ''\n\n  setResultData(fixed);\n  setResultViz(fixed);\n}\n\nfunction setResultMessage(text, type) {\n  let resultMessage = document.getElementById('result-message');\n  resultMessage.innerHTML = text;\n  resultMessage.className = type;\n}\n\nfunction setResultData(data) {\n  console.log(data);\n  let tmpData = {\n    input: data.input,\n    isValid: data.isValid,\n    wasFixed: data.wasFixed,\n    message: data.message,\n    result: data.result,\n    totalTries: data.totalTries,\n    errorList: data.errorList,\n  };\n  let resultData = document.getElementById('result-data');\n  resultData.innerHTML = '<pre>'+JSON.stringify(tmpData, null, 2)+'</pre>';\n}\n\nfunction setResultViz(data) {\n  let resultViz = document.getElementById('result-viz');\n  let text = '';\n  text += '<p>Total number of tries: '+data.totalTries+'</p>';\n  for (let i = 0; i < data.errorList.length; i++) {\n    text += '<div>';\n    text += '<p>';\n    text += '<b>' + (i+1) + '. Fix</b>';\n    text += ' expecting: <code>' + data.errorList[i].expecting + '</code>';\n    text += ' got: <code>' + data.errorList[i].got + '</code>';\n    text += '</p>';\n    text += '<pre>' + data.errorList[i].fix + '</pre>';\n    text += '</div>';\n  }\n  resultViz.innerHTML = text;\n}\n\nwindow.jsonfix = {\n  update: update,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./web/app.js","'use strict';\n\nconst JsonLintError = require('./jsonlinterror');\nconst fix = require('./fix');\n\n/**\n *\n */\nclass JSONFix {\n  /**\n   * @param {Object} jsonlint - the jsonlint dependency\n   */\n  constructor(jsonlint) {\n    this.input = null; // store the input data as string\n    this.isValid = null; // if input is valid, set to true\n    this.wasFixed = null; // set to true if source was successful fixed\n    this.message = null; // a message about the fix process\n    this.result = null; // store the fixed json data here\n    this.totalTries = 0; // count the number of \"JSONFixer\" calls\n    this.errorList = []; // all found and fixed bugs will be reported here.\n    this.jsonlint = jsonlint; // the jsonlint instance\n    this.maximumTries = 100;\n  }\n\n  /**\n   * functions\n   * @param {String} src - json data\n   * @return {String} fixed json data\n   */\n  process(src) {\n    // set the input\n    this.input = src;\n\n    // reset some variables\n    this.isValid = null;\n    this.wasFixed = null;\n    this.message = null;\n    this.result = null;\n    this.totalTries = 0;\n    this.errorList = [];\n\n    // first check if source is valid...\n    try {\n      let jsonParsed = JSON.parse(src);\n      this.isValid = true;\n      this.wasFixed = false;\n      this.message = 'JSON is valid!';\n      this.result = jsonParsed;\n    } catch (e) {\n      this.isValid = false;\n\n      // check if source is empty\n      if (src === '') {\n        this.wasFixed = true;\n        this.message = 'empty source detected...';\n        this.result = {};\n        this.totalTries = 1;\n        // TODO: JSONFix.errorList.push({});\n      } else {\n        this.tryFix(this.normalize(src));\n      }\n    }\n\n    // DEBUG(this.message);\n    return this;\n  }\n\n  /**\n   * optimize input source for bug detection\n   *\n   * @param {String} src - json data\n   * @return {String} normalized json data\n   */\n  normalize(src) {\n    let optimizedSrc1 = src.replace('{', '{\\n');\n    let optimizedSrc2 = optimizedSrc1.replace('}', '\\n}');\n    let optimizedSrc3 = optimizedSrc2.replace('\",', '\",\\n');\n    // TODO: remove whitespace\n    // TODO: remove java style comments\n    return optimizedSrc3;\n  }\n\n  /**\n   * this function we call multiple times. (at the callbacks of the different fix functions)\n   *\n   * @param {String} src - json data\n   * @return {this} this JSONFix instance\n   */\n  tryFix(src) {\n    this.totalTries++;\n\n    // stop infinite loops after a maximum number of tries\n    if (this.totalTries === this.maximumTries) {\n      this.wasFixed = false;\n      return this;\n    }\n\n    // console.log('JSONTryFix totalTries =', this.totalTries, 'source:', src);\n\n    // try to lint the source. we use this to get the jsonlint error and detect the bug.\n    try {\n      let linted = this.jsonlint.parse(src);\n      this.wasFixed = true;\n      this.message = 'input was successfully fixed!';\n      this.result = linted;\n    } catch (e) {\n      // save error to history\n      let err = new JsonLintError().parse(e.message);\n      this.errorList.push(err);\n\n      // try to fix... check if fix method exists.\n      switch (err.description) {\n        case 'Parse error':\n          err.message = null;\n          err.fix = null;\n          this.tryFixParseError(src, err);\n          break;\n        default:\n          this.result = null;\n          this.message = 'cannot fix the error type \"'+err.description+'\"... sorry';\n          break;\n      }\n    }\n  }\n\n  /**\n   * we only fix parse errors...\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   */\n  tryFixParseError(input, err) {\n    // check the error.got string and choose a fixer\n    switch (err.got) {\n      case 'EOF\\'': {\n        let fixedEOF = this.tryFixParseErrorEOF(input, err);\n        this.tryFix(fixedEOF);\n        break;\n      }\n      case 'undefined\\'': {\n        let tmp = this.tryFixParseErrorUndefined(input, err);\n        this.tryFix(tmp);\n        break;\n      }\n      case '}\\'': {\n        let tmp = this.tryFixParseErrorCurlyBracket(input, err);\n        this.tryFix(tmp);\n        break;\n      }\n      case ':\\'': {\n        let tmp = this.tryFixParseErrorColon(input, err);\n        this.tryFix(tmp);\n        break;\n      }\n      case 'STRING\\'': {\n      // case \"TRUE'\":\n      // case \"FALSE'\":\n        let tmp = this.tryFixParseErrorSTRING(input, err);\n        this.tryFix(tmp);\n        break;\n      }\n      case 'NUMBER\\'': {\n        let tmp = this.tryFixParseErrorNUMBER(input, err);\n        this.tryFix(tmp);\n        break;\n      }\n      default:\n        JSONFix.wasFixed = false;\n        JSONFix.message = 'cannot fix got=\"'+err.got+'\" '+'expecting=\"'+err.expecting+'\"';\n        throw new Error(JSONFix.message);\n    }\n  }\n\n  /**\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   * @return {String} fixed json data\n   */\n  tryFixParseErrorEOF(input, err) {\n    // console.log('call tryFixParseErrorEOF')\n    // console.log('input:', input)\n    // console.log('err:', err)\n    // console.log('cb:', cb);\n\n    // check if last char is } or ]\n    let lastChar = input[input.length-1];\n    // console.warn('last char', lastChar);\n    if (lastChar !== '}' || lastChar !== ' ]') {\n      // check if input is object or array...\n      if (input[0] === '{') {\n        // console.warn('input is object');\n        input += '}';\n        err.message = 'missing } at end of source';\n        err.fix = input;\n      }\n      if (input[0] === '[') {\n        // console.warn('input is array');\n        input += ']';\n        err.message = 'missing ] at end of source';\n        err.fix = input;\n      }\n    }\n    return input;\n  }\n\n  /**\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   * @return {String} fixed json data\n   */\n  tryFixParseErrorUndefined(input, err) {\n    // console.log('call fixParseError_undefined');\n    // console.log('input:', input)\n    // console.log('err:', err)\n    // console.log('cb:', cb);\n\n    let inputLines = input.split('\\n');\n    // console.log('error at this line:', inputLines[err.line-1]);\n    let tmp = inputLines[err.line-1].split(',');\n    // console.log(tmp);\n    inputLines[err.line-1] = tmp[0]+'\",';\n\n    let fixed = inputLines.join('\\n');\n    // console.log('fixed: \"'+fixed+'\"');\n\n    // cb(fixed);\n    return fixed;\n  }\n\n  /**\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   * @return {String} fixed json data\n   */\n  tryFixParseErrorCurlyBracket(input, err) {\n    // JSONFix.message = 'TODO: fix {';\n\n    // if(err.expecting === \"':'\") {\n    //   console.log('} & :');\n    // } else if(err.expecting === \"'STRING'\") {\n    //     console.log('} & STRING');\n    // } else {\n    //   fixParseError_CurlyBracket(input, err, cb);\n    // };\n\n    let inputLines = input.split('\\n');\n    // console.info('error at this line:', inputLines[err.line-1]);\n\n    if (err.expecting === '\\'STRING\\'') {\n      // console.log('too much \",\" ?');\n      // check if comma is last char\n      let totalchars = inputLines[err.line-1].length;\n      let lastChar = inputLines[err.line-1][totalchars-1];\n      // console.log('totalchars:', totalchars);\n      // console.log('lastChar:', lastChar);\n\n      if (lastChar === ',') {\n        // console.info('remove last char (,)');\n        // fix it...\n        inputLines[err.line-1] = inputLines[err.line-1].replace(',', '');\n      }\n\n      let fixed = inputLines.join('\\n');\n      err.fix = fixed;\n      // console.log('fixed: \"'+fixed+'\"');\n\n      // cb(fixed);\n      return fixed;\n    } else if (err.expecting === '\\'EOF\\', \\'}\\', \\':\\', \\',\\', \\']\\'') {\n      return input;\n    } else if (err.expecting === '\\',\\', \\']\\'') {\n      inputLines[err.line-1] += ']';\n      return inputLines.join('\\n');\n    }\n  }\n\n  /**\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   * @return {String} fixed json data\n   */\n  tryFixParseErrorColon(input, err) {\n    if (err.expecting === '\\'EOF\\', \\'}\\', \\',\\', \\']\\'') {\n      let firstChar = input[0];\n      let lastChar = input[input.length-1];\n      // console.log('firstChar', firstChar);\n      // console.log('lastChar', lastChar);\n\n      // check if { is missing...\n      if (firstChar !== '{' && lastChar === '}') {\n        err.message = 'missing { at the beginning of the json';\n        let fixed = '{'+input;\n        err.fix = fixed;\n        return fixed;\n      }\n\n      // check if [ is missing...\n      if (firstChar !== '[' && lastChar === ']') {\n        err.message = 'missing [ at the beginning of the json';\n        let fixed2 = '['+input;\n        err.fix = fixed2;\n        return fixed2;\n      }\n    }\n\n    if (err.expecting === '\\'STRING\\', \\'NUMBER\\', \\'NULL\\', \\'TRUE\\', \\'FALSE\\', \\'{\\', \\'[\\'') {\n      // multiple colon\n    }\n  }\n\n  /**\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   * @return {String} fixed json data\n   */\n  tryFixParseErrorSTRING(input, err) {\n    let inputLines = input.split('\\n');\n    // console.log('inputLines:', inputLines);\n    // console.log('buggyCode:', inputLines[err.line-1]);\n\n    if (err.expecting === '\\'EOF\\', \\'}\\', \\',\\', \\']\\'') {\n      err.message = 'missing comma';\n      // console.log(err.messsage);\n      let fixed = fix.missingComma(inputLines[err.line-1]);\n      err.fix = fixed;\n      inputLines[err.line-1] = fixed;\n    } else if (err.expecting === '\\'EOF\\', \\'}\\', \\':\\', \\',\\', \\']\\'') {\n      // is colon missing?\n      if (inputLines[err.line-1].indexOf(':') === -1) {\n        // console.log('cannot find colon');\n\n        err.message = 'missing colon';\n        // console.log(err.message);\n        let tmpFixed = fix.missingColon(inputLines[err.line-1]);\n        err.fix = tmpFixed;\n        inputLines[err.line-1] = tmpFixed;\n      }\n\n      // is comma missing?\n      if (inputLines[err.line-1].indexOf(',') === -1) {\n        // console.log('cannot find ,');\n        let fixed3 = fix.missingComma(inputLines[err.line-1]);\n        err.fix = fixed3;\n        inputLines[err.line-1] = fixed3;\n      }\n    } else {\n      JSONFix.message = 'cannot fix this ugly bug... sorry!';\n      JSONFix.wasFixed = false;\n    }\n\n    let fixedResult = inputLines.join('\\n');\n    // console.info('fixedResult: \"'+fixedResult+'\"');\n    return fixedResult;\n  }\n\n  /**\n   * @param {String} input - json data\n   * @param {Object} err - jsonlint error\n   */\n  tryFixParseErrorNUMBER(input, err) {\n    // if (err.expecting === '\\'EOF\\', \\'}\\', \\',\\', \\']\\'') {\n    //\n    // }\n  }\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = JSONFix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsonfix.js","'use strict';\n\n/**\n * JsonLint error parser and data structure\n */\nclass JsonLintError {\n  /**\n   * the error data structure we want to return.\n   */\n  constructor() {\n    this.description = '';\n    this.line = '';\n    this.code = '';\n    this.expecting = '';\n    this.got = '';\n  }\n\n  /**\n   * parse a jsonlint message and return an error object with\n   * description, line, code, expecting and got elements\n   *\n   * @param {String} msg - the output from jsonlint\n   * @return {Object}\n   */\n  parse(msg) {\n    const errorLines = msg.split('\\n');\n    this.description = errorLines[0].split(' on line ')[0];\n    this.line = errorLines[0].split('on line ')[1].split(':')[0];\n    this.code = errorLines[1];\n    this.expecting = errorLines[3].split('Expecting ')[1].split(', got ')[0];\n    this.got = errorLines[3].split(', got \\'')[1];\n    // console.log('------------------------');\n    // console.log(this);\n    // console.log('------------------------');\n    return this;\n  }\n}\n\nmodule.exports = JsonLintError;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsonlinterror.js","'use strict';\n\n/**\n * fix missing colon\n *\n * @param {Srtring} input - part of json data\n * @return {String} fixed json data\n */\nexports.missingColon = function(input) {\n  if (!input || input === '') {\n    return '';\n  } else {\n    let tmp = input.split('\"');\n    let fixedLine = '';\n    if (tmp.length === 3) {\n      fixedLine = `${tmp[0]}\"${tmp[1]}\":`;\n    } else if (tmp.length === 5) {\n      fixedLine = `${tmp[0]}\"${tmp[1]}\":${tmp[2]}\"${tmp[3]}\"${tmp[4]}`;\n    } else {\n      throw new Error('cannot set colon');\n    }\n    return fixedLine;\n  }\n};\n\n/**\n * fix missing comma\n *\n * @param {Srtring} input - part of json data\n * @return {String} fixed json data\n */\nexports.missingComma = function(input) {\n  if (!input || input === '') {\n    return '';\n  } else {\n    return input+',';\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/fix.js"],"sourceRoot":""}